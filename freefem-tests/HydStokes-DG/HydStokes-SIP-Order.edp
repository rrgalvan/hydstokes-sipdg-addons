// Discontinous Galerlin SIP Method for solve Stokes system
//
// Based on [Di Pietro - Ern, Mathematical Aspects of Discontinuous
// Galerkin Methods], Chapter 6
//
// J. Rafael Rodr\'iguez Galv\'an

////////////////
// Parameters //
////////////////

verbosity=0;
//load UMFPACK;
//load "MUMPS_FreeFem";

real nu=1;
real SIPPenalty=nu*5; // Penalty to achieve coercivity in DG SIP forms
real domainEpsilon = 0; // 1e-4;
string testDescription="HydStokes_P1P1DG_eps=" + domainEpsilon;
real dEps2 = domainEpsilon*domainEpsilon;
real dEpsilon2 = dEps2;

func uSurface = 0; //x*(1-x); // Horizontal surface velocity in cavity test
// func uSurface=1;
include "exact-sol-HydStokes-steady.idp"
func f1 = f1Exact; // RHS / u
func f2 = f2Exact; // RHS / v

real pEpsilon  = 1.0e-15; // Penalty epsilon in p-equations

real[int] uErrL2(2), uErrH1(2), vErrL2(2), vErrH1(2), pErrL2(2); // Errors in 2 time steps (for orders)
real[int] uuErrL2(2), uuErrH1(2), ppErrL2(2); // Errors in 2 time steps (for orders)

int [int] meshSizes= [8,16,32,64,128];

for(int i=0; i<meshSizes.n; i++) {
  int n = meshSizes[i];
  cout << "n=" << n << ", mesh_size:" << sqrt(2)/n << endl;


  //Structured mesh
  mesh Th = square(n,n);
  int bottom=1, surface=3; int [int] walls = [2,4];
  // // Unstructured mesh
  // real domainX0=0, domainX1=1, domainY0=0, domainY1=1;
  // real ix=domainX1-domainX0, iy=domainY1-domainY0;
  // int walls=100;
  // border bottom(t=0,ix) { x=domainX0+t; y=domainY0;   }
  // border rWall(t=0,iy)  { x=domainX1;   y=domainY0+t; label=walls;}
  // border surface(t=0,ix){ x=domainX1-t; y=domainY1;   }
  // border lWall(t=0,iy)  { x=domainX0;   y=domainY1-t; label=walls;}
  // int  n = 30; // Mesh size
  // mesh Th=buildmesh( bottom(n) + rWall(n) + surface(n) + lWall(n) );

  func PkDGu = P1dc;  // Discontinuous Pk for pressure
  func PkDGp = P1dc;  // Discontinuous Pk for pressure
  func PkCGu = P1b;  // Continous Pk for velocity
  func PkCGp = P1;  // Continous Pk for pressure
  // int qfo = 2*k+1;  // Order of quadrature formula
  // int qfoP = qfo;  // Order of quadrature formula for pressure integrals

  // Discontinuous FE
  fespace UhDisc(Th,PkDGu);
  fespace VhDisc(Th,PkDGu);
  fespace PhDisc(Th,PkDGp);
  UhDisc u, ub;
  VhDisc v, vb;
  PhDisc p, pb;

  // Continuous FE (for testing)
  fespace UhCont(Th,PkCGu);
  fespace VhCont(Th,PkCGu);
  fespace PhCont(Th,PkCGp);
  UhCont uu, uub;
  VhCont vv, vvb;
  PhCont pp, ppb;

  ////////////
  // Macros //
  ////////////

  macro dn(u) (N.x*dx(u)+N.y*dy(u)) //  Normal derivative
    ;
  macro div(u,v) (dx(u)+dy(v)) // EOM
    ;
  // def: jump = external - internal value; on border exter value =0
  //      average = (external + internal value)/2, on border just internal value
  NewMacro aSIP(u, ub, coefficient)
    (
     int2d(Th) ( (coefficient)*nu * ( dx(u)*dx(ub) + dy(u)*dy(ub) ) )
     + intalledges(Th)
     (
      + (coefficient)*nu * ( average(dn(u))*jump(ub) + jump(u)*average(dn(ub)) ) / nTonEdge
      + (coefficient) * (SIPPenalty/lenEdge)*(jump(u)*jump(ub)) / nTonEdge
      )
     ) EndMacro;
  NewMacro bSIP1(u,v,p)
    int2d(Th)( -p*(div(u,v)) )
    EndMacro;
  NewMacro bSIP2(u,v,p)
    intalledges(Th)
    (
     // (nTonEdge-1)*(jump(u)*N.x + jump(v)*N.y)*average(p)
     -(jump(u)*N.x + jump(v)*N.y)*average(p) /nTonEdge
     ) EndMacro;
  NewMacro shV(v, vb, coefficient)
    intalledges(Th)
    (
     (coefficient)/lenEdge * (jump(v)*jump(vb)*N.y*N.y) / nTonEdge
     ) EndMacro;
  NewMacro shP(q,r)
    intalledges(Th)
    (
     (nTonEdge-1)*lenEdge*jump(q)*jump(r) / nTonEdge
     ) EndMacro;

  //////////////////////////////
  // Variational Formulations //
  //////////////////////////////

  problem HydStokesSIP([u,v,p], [ub,vb,pb]) =
    // ================
    // 1. Bilinear form
    // ================

    //
    // 1.a) Mount all terms
    //

    aSIP(u, ub, 1) + aSIP(v, vb, dEps2) + shV(v, vb, (1-dEps2)) // Bilinear form a(.,.)
    + bSIP1(ub,vb,p) + bSIP2(ub,vb,p) // Bilinear form b(.,.)
    - bSIP1(u,v,pb) - bSIP2(u,v,pb) // Bilinear form b(.,.)
    + shP(p, pb) // p jumps
    + int2d(Th)(pEpsilon*p*pb)
    - int2d(Th)
    (
     + f1(x,y) * ub
     + f2(x,y) * vb
     )

    //
    // 1.b) On Neumann boundaries, we must cancel "Dirichlet" terms
    // (where u or v appears) coming from SIP bilinear form. Also if
    // dirichlet b.c. are imposed to pressure, the must be canceled.
    //

    // 1.b.1) On wall boundaries, we have neumann b.c. for v (non Dirichlet)
    - int1d(Th, walls)
    (
     dEps2 * ( - nu*v*dn(vb) + (SIPPenalty/lenEdge)*(v*vb) ) // from aSIP(v,vb)
     // + (1-dEps2)/lenEdge * (v*N.y*vb*N.y) // from +(1-eps)*sh(v,bv)
     // - v*N.y*pb // from -b(w,pb)
     )

    // 1.b.2) We have no b. condition for p in any boundary
    // - int1d(Th, surface, bottom, walls)
    // (
    //   (ub*N.x+vb*N.y)*p // from +b(wb,p)
    //  )

    //
    // 1.c) On Dirichlet boundaries, we must cancel "Neumann" terms
    // (where dn(u) or dn(v) appears) which come from SIP bilinear form
    //

    // // 1.c.1) On surface and bottom boundaries, we have diriclet b.c. for u,v
    // - int1d(Th, surface, bottom)
    // (
    //  - nu *       ( dn(u)*ub )  // from aSIP(u,ub)
    //  - nu*dEps2 * ( dn(v)*vb )  // from aSIP(v,vb)
    //  )
    // // 1.c.2) On wall boundaries, we have diriclet b.c. for u
    // - int1d(Th, walls)
    // (
    //  - nu *       ( dn(u)*ub )  // from aSIP(u,ub)
    //  )

    // ================
    // 2. Linear form
    // ================

    //
    // 2.a) Dirichlet boundary conditions. We only fix u on surface
    // boundary because all other dirichlet b.c. are homogeneous
    //
    - int1d(Th, surface)
    (
     - nu * uSurface*dn(ub) + (SIPPenalty/lenEdge) * uSurface*ub // from aSIP(u,ub)
     // - uSurface*N.x*pb // from -b(u,pb)
     )

    //
    // 2.b) Neumann boundary conditions: dn(v)=0 on side walls. Terms
    // are omitted becouse we have homogeneous b.c.
    //
    // - int1d(Th, walls) (0*vb)

    ; // end problem HydStokesSIP -------------------------------------------------------------


  problem HydStokes([uu,vv,pp], [uub,vvb,ppb]) =
    int2d(Th) (
	       + nu * ( dx(uu)*dx(uub) + dy(uu)*dy(uub) )
	       + nu*dEps2 * ( dx(vv)*dx(vvb) + dy(vv)*dy(vvb) )
	       - pp*dx(uub) - pp*dy(vvb)
	       + dx(uu)*ppb + dy(vv)*ppb
	       + nu*div(uu,vv)*dy(vvb) // dz(v) stabilization term
	       + pEpsilon*pp*ppb
	       )
    + on(surface, uu=uSurface, vv=0)
    + on(walls, uu=0)
    + on(bottom, uu=0, vv=0);
  ;

  //////////////
  // Solve DG //
  //////////////
  real time0, time1;
  time0 = clock();
  HydStokesSIP;
  // Force zero mean
  bool forceZeroMean=true; if(forceZeroMean) {
    real pMean = int2d(Th)(p)/int2d(Th)(1.0);
    p = p - pMean;
  }
  time1 = clock();
  cout << "DG SIP time: " << time1-time0 << " << [SIP-DG]"<< endl;

  int interactive=0; // If 1: plot results
  if(interactive) plot(p,[u,v],cmm="Discontinuous Galerkin",wait=1,value=1,fill=1);
  // if(interactive) plot(p,cmm="Discontinuous Galerkin",wait=1,value=1,fill=1);

  //////////////
  // Solve CG //
  //////////////
  time0 = clock();
  HydStokes;
  // Force zero mean
  bool forceZeroMeanCG=forceZeroMean; if(forceZeroMeanCG) {
    real pMean = int2d(Th)(p)/int2d(Th)(1.0);
    p = p - pMean;
  }
  time1 = clock();
  cout << "CG time:     " << time1-time0 << endl;
  if(interactive) plot(pp,[uu,vv],cmm="Continuous Galekin",wait=1,value=1,fill=1);
  // if(interactive) plot(pp,cmm="Continuous Galekin",wait=1,value=1,fill=1);

  bool saveVTK=false; if(saveVTK) {
    load "iovtk";
    savevtk("/tmp/DGsolution" + n + ".vtk",
  	    Th,
  	    [u,v,0],
  	    p,
  	    dataname="Velocity Pressure") ;
    savevtk("/tmp/CGsolution" + n + ".vtk",
  	    Th,
  	    [uu,vv,0],
  	    pp,
  	    dataname="Velocity Pressure") ;
    savevtk("/tmp/EXACTsolution" + n + ".vtk",
  	    Th,
  	    [uExact(x,y),vExact(x,y),0],
  	    pExact(x,y),
  	    dataname="ExactV ExactP") ;
  }

  uErrL2[1] = sqrt(int2d(Th)(square(u-uExact(x,y))));
  uErrH1[1] = sqrt(int2d(Th)(square(dx(u)-DXuExact(x,y))));
  vErrL2[1] = sqrt(int2d(Th)(square(v-vExact(x,y))));
  vErrH1[1] = sqrt(int2d(Th)(square(dx(v)-DXvExact(x,y))));
  pErrL2[1] = sqrt(int2d(Th)(square(p-pExact(x,y))));
  cout << "DG u error H1: " << uErrH1[1] << endl;
  cout << "DG u error L2: " << uErrL2[1] << endl;
  cout << "DG v error L2: " << vErrL2[1] << endl;
  cout << "DG p error L2: " << pErrL2[1] << endl;
  uuErrL2[1] = sqrt(int2d(Th)(square(uu-uExact(x,y))) + int2d(Th)(square(vv-vExact(x,y))));
  uuErrH1[1] = sqrt(int2d(Th)(square(dx(uu)-DXuExact(x,y))) + int2d(Th)(square(dy(uu)-DYuExact(x,y))));
  ppErrL2[1] = sqrt(int2d(Th)(square(pp-pExact(x,y))));
  cout << "CG u/p error L2: " << uuErrL2[1] << "/" << ppErrL2[1] << endl;

  if(i>0) { // Compute error orders
    cout << "Convergence rates... " << endl <<
      " * u, L2 :"   << log(uErrL2[0]/uErrL2[1])/log(2.) << endl <<
      " * u, H1 :"   << log(uErrH1[0]/uErrH1[1])/log(2.) << endl <<
      " * v, L2 :"   << log(vErrL2[0]/vErrL2[1])/log(2.) << endl <<
      " * v, H1 :"   << log(vErrH1[0]/vErrH1[1])/log(2.) << endl <<
      " * p, L2 :"   << log(pErrL2[0]/pErrL2[1])/log(2.) << endl <<
      endl;
  }
  uErrL2[0] = uErrL2[1];
  uErrH1[0] = uErrH1[1];
  vErrL2[0] = vErrL2[1];
  vErrH1[0] = vErrH1[1];
  pErrL2[0] = pErrL2[1];

 }
