// Discontinous Galerlin SIP Method for solve Stokes system
//
// Based on [Di Pietro - Ern, Mathematical Aspects of Discontinuous
// Galerkin Methods], Chapter 6
//
// J. Rafael Rodr\'iguez Galv\'an

load "Element_P3"
load "Element_P4"
load "Element_P3dc"
load "Element_P4dc"

////////////////
// Parameters //
////////////////

verbosity=0;
int interactive=0; // If 1: plot results

real SIPPenalty=5.0e+3; // Penalty to achieve coercivity
real nu=1.;

// macro hFace() (1.0/sqrt(n)) // An approximation of h_F (length of face)
macro hFace() (lenEdge) // An approximation of h_F (length of face)
  ;
macro LocalPenalty() (SIPPenalty/hFace) // EOM
  ;

include "exact-sol-Stokes-steady.idp"

func f1 = f1Exact; // RHS / u
func f2 = f2Exact; // RHS / v
real pEpsilon  = 1.0e-10; // Penalty epsilon in p-equations

real[int] uErrL2(2), uErrH1(2), pErrL2(2); // Errors in 2 time steps (for orders)
real[int] uuErrL2(2), uuErrH1(2), ppErrL2(2); // Errors in 2 time steps (for orders)

int [int] meshSizes= [8,16,32,64];

for(int i=0; i<meshSizes.n; i++) {
  int n = meshSizes[i];
  cout << "n=" << n << endl;

  ////////////////////////////////////
  // Mesh and Finite Element Spaces //
  ////////////////////////////////////
  mesh Th = square(n,n);
  int bottom=1, surface=3; int [int] walls = [2,4];

  int k = 1; // Degree of the polynomials (2 for P2dc ...)
  assert(k==1); // Assure to change the following lines...
  func PkDG = P1dc;  // Discontinuous Pk
  func PkCGu = P1b;  // Continous Pk for velocity
  func PkCGp = P1;  // Continous Pk for pressure
  int qfo = 2*k;  // Order of quadrature formula
  int qfoP = qfo+1;  // Order of quadrature formula for pressure integrals

  // Discontinuous FE
  fespace UhDisc(Th,PkDG);
  fespace VhDisc(Th,PkDG);
  fespace PhDisc(Th,PkDG);
  UhDisc u, ub;
  VhDisc v, vb;
  PhDisc p, pb;

  // Continuous FE (for testing)
  fespace UhCont(Th,PkCGu);
  fespace VhCont(Th,PkCGu);
  fespace PhCont(Th,PkCGp);
  UhCont uu, uub;
  VhCont vv, vvb;
  PhCont pp, ppb;

  ////////////
  // Macros //
  ////////////

  macro dn(u) (N.x*dx(u)+N.y*dy(u) ) //  Normal derivative
    ;
  macro div(u,v) (dx(u)+dy(v)) // EOM
    ;
  // def: jump = external - internal value; on border exter value =0
  //      average = (external + internal value)/2, on border just internal value
  NewMacro aSIP(u,ub)
    (
     int2d(Th, qforder=qfo) ( nu * ( dx(u)*dx(ub) + dy(u)*dy(ub) ) )
     + intalledges(Th, qforder=qfo)
     (
      ( jump(ub)*average(dn(u)) + jump(u)*average(dn(ub)) ) /nTonEdge
      + LocalPenalty*(jump(u)*jump(ub))
      )
     ) EndMacro;
  NewMacro bSIP1(u,v,p)
    int2d(Th, qforder=qfoP)( -p*(div(u,v)) )
    EndMacro;
  NewMacro bSIP2(u,v,p)
    intalledges(Th, qforder=qfo)
    (
     (jump(u)*N.x + jump(v)*N.y)*average(p) /nTonEdge
     ) EndMacro;
  NewMacro sSIP(q,r)
    intalledges(Th, qforder=qfoP)
    (
     (nTonEdge-1)*hFace*jump(q)*jump(r)
     ) EndMacro;

  //////////////////////////////
  // Variational Formulations //
  //////////////////////////////

  problem StokesSIP([u,v,p], [ub,vb,pb]) =
    aSIP(u,ub) + aSIP(v,vb) // Bilinear form a(.,.)
    + bSIP1(ub,vb,p) + bSIP2(ub,vb,p) // Bilinear form b(.,.)
    - bSIP1(u,v,pb) - bSIP2(u,v,pb) // Bilinear form b(.,.)
    + sSIP(p, pb) // Stabilization
    + int2d(Th)(pEpsilon*p*pb)
    - int2d(Th)
    (
     + f1(x,y) * ub
     + f2(x,y) * vb
     )
    // + int1d(Th, bottom, walls, surface)
    // ( // Dirichlet condition (imposee de maniere faible)
    //  uExact(x,y)*(dn(ub)-LocalPenalty*ub)
    //  + vExact(x,y)*(dn(vb)-LocalPenalty*vb)
    //  );
    + on(bottom,  u=uExact(x,y), v=vExact(x,y))
    + on(walls,   u=uExact(x,y), v=vExact(x,y))
    + on(surface, u=uExact(x,y), v=vExact(x,y));

  problem Stokes([uu,vv,pp], [uub,vvb,ppb]) =
    int2d(Th) (
	       + nu * ( dx(uu)*dx(uub) + dy(uu)*dy(uub) )
	       + nu * ( dx(vv)*dx(vvb) + dy(vv)*dy(vvb) )
	       - pp*dx(uub) - pp*dy(vvb)
	       + dx(uu)*ppb + dy(vv)*ppb
	       + pEpsilon*pp*ppb
	       )
    - int2d(Th) (
		 + f1(x,y) * uub
		 + f2(x,y) * vvb
		 )
    // + int1d(Th, bottom, walls, surface)
    // (
    //  uExact(x,y)*(dn(uub)-LocalPenalty*uub) // Dirichlet condition (imposee de maniere faible)
    //  + vExact(x,y)*(dn(vvb)-LocalPenalty*vvb) // Dirichlet condition (imposee de maniere faible)
    //  );
    + on(bottom,  uu=uExact(x,y), vv=vExact(x,y))
    + on(walls,   uu=uExact(x,y), vv=vExact(x,y))
    + on(surface, uu=uExact(x,y), vv=vExact(x,y));

  //////////////
  // Solve DG //
  //////////////
  real time0, time1;
  time0 = clock();
  StokesSIP;
  // Force zero mean
  bool forceZeroMean=false; if(forceZeroMean) {
    PhDisc one; one[] = 1.;
    real pMean = int2d(Th)(p)/int2d(Th)(one);
    p = p - pMean;
  }
  time1 = clock();
  cout << "DG SIP time: " << time1-time0 << endl;
  if(interactive) plot(p,cmm="Discontinuous Galerkin",wait=1,value=1,fill=1);

  if(true) {
    load "iovtk";
    savevtk("/tmp/solution" + n + ".vtk",
	    Th,
	    [u,v,0],
	    p,
	    dataname="Velocity Pressure") ;
    savevtk("/tmp/error" + n + ".vtk",
	    Th,
	    [u-uExact(x,y),v-vExact(x,y),0],
	    p-pExact(x,y),
	    dataname="ErrorV ErrorP") ;
  }

  //////////////
  // Solve CG //
  //////////////
  time0 = clock();
  Stokes;
  time1 = clock();
  cout << "CG time:     " << time1-time0 << endl;
  if(interactive) plot(pp,cmm="Continuous Galerkin",wait=1,value=1,fill=1);

  // cout << "Residual (DG): " << int2d(Th,qforder=qfo)(dx(u)*dx(u) +
  // dy(u)*dy(u) - int2d(Th)(f*u)) << endl;
  // cout << "Residual (CG): " << int2d(Th)(dx(uu)*dx(uu) +
  // dy(uu)*dy(uu) - int2d(Th)(f*uu)) << endl;

  // Vh error = u-uExact;
  uErrL2[1] = sqrt(int2d(Th)(square(u-uExact(x,y))) + int2d(Th)(square(v-vExact(x,y))));
  uErrH1[1] = sqrt(int2d(Th)(square(dx(u)-DXuExact(x,y))) + int2d(Th)(square(dy(u)-DYuExact(x,y))));
  pErrL2[1] = sqrt(int2d(Th)(square(p-pExact(x,y))));
  cout << "DG u/p error L2: " << uErrL2[1] << "/" << pErrL2[1] << "<<***" << endl;
  uuErrL2[1] = sqrt(int2d(Th)(square(uu-uExact(x,y))) + int2d(Th)(square(vv-vExact(x,y))));
  uuErrH1[1] = sqrt(int2d(Th)(square(dx(uu)-DXuExact(x,y))) + int2d(Th)(square(dy(uu)-DYuExact(x,y))));
  ppErrL2[1] = sqrt(int2d(Th)(square(pp-pExact(x,y))));
  cout << "CG u/p error L2: " << uuErrL2[1] << "/" << ppErrL2[1] << endl;

  if(i>0) { // Compute error orders
    cout << "Convergence rates... " << endl <<
      " * u, L2 :"   << log(uErrL2[0]/uErrL2[1])/log(2.) << endl <<
      " * u, H1 :"   << log(uErrH1[0]/uErrH1[1])/log(2.) << endl <<
      // " * v, L2 :"   << log(vErrL2[0]/vErrL2[1])/log(2.) << endl <<
      // " * v, H1 :"   << log(vErrH1[0]/vErrH1[1])/log(2.) << endl <<
      " * p, L2 :"   << log(pErrL2[0]/pErrL2[1])/log(2.) << endl <<
      endl;
  }
  uErrL2[0] = uErrL2[1];
  uErrH1[0] = uErrH1[1];
  pErrL2[0] = pErrL2[1];
 }
