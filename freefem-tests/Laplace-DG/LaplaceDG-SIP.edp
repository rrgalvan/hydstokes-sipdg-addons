// Discontinous Galerlin SIP Method for solve
//
//  $ -\Delta u = f$ on $\Omega$ and $u=g$ on $\Gamma$
//
// Based on [Di Pietro - Ern, Mathematical Aspects of Discontinuous
// Galerkin Methods], Section 4.2.1. eq. (4.14).
//
// J. Rafael Rodr\'iguez Galv\'an

load "Element_P3"
load "Element_P4"
load "Element_P3dc"
load "Element_P4dc"

////////////////
// Parameters //
////////////////

verbosity=0;
int interactive=0; // If 1: plot results

real PenaltyParameter=1000; // Penalisation for achieve coercivity
real C=1.;
func uExact = C*(1-x*x-y*y);
func DXuExact = -2*C*x;
func DYuExact = -2*C*y;
func DXXuExact = -2*C;
func DYYuExact = -2*C;
func f=-DXXuExact-DYYuExact; // RHS
func g=0;  // Dirichlet boundary condition
int [int] dirichletBoundary=[1,2,3,4];

macro hFace() (lenEdge) // An approximation of h_F (length of face)

  int [int] meshSizes= [8,16,32,64,128,256];

for(int i=0; i<meshSizes.n; i++) {
  int n = meshSizes[i];
  cout << "Test, n=" << n << endl;

  ////////////////////////////////////
  // Mesh and Finite Element Spaces //
  ////////////////////////////////////
  border C(t=0,2*pi){x=cos(t); y=sin(t);}
  mesh Th = buildmesh (C(n));
  if(interactive) {plot(Th);}

  int k = 2; // Degree of the polynomials (2 for P2dc ...)
  assert(k==2);
  func PkDG = P2dc;  // Discontinuous Pk
  func PkCG = P2;  // Continuous Pk
  int qfo =2*k+1;  // Order of quadrature formula

  fespace Vh(Th,PkDG);  // Broken FE space
  Vh u,v;

  // Continuous FE (for testing)
  fespace VhCont(Th,PkCG);
  VhCont uu, vv;

  ////////////
  // Macros //
  ////////////

  macro dn(u) (N.x*dx(u)+N.y*dy(u) ) //  Normal derivative
    ;
  // def: jump = external - internal value; on border exter value =0
  //      average = (external + internal value)/2, on border just internal value
  //   (RK: In FreeFem++ nTonEdge = 1 on border edge and = 2 on internal edges)
  NewMacro aSIP(u,v)
    (
     int2d(Th, qforder=qfo)( dx(u)*dx(v)+dy(u)*dy(v) )  // Diffusion
     +intalledges(Th, qforder=qfo)  // Consitency and coervicity terms
     ( ( jump(v)*average(dn(u)) + jump(u)*average(dn(v)) ) / nTonEdge
      + PenaltyParameter*jump(u)*jump(v)/hFace )
     ) EndMacro;

  /////////////////////////////
  // Variational Formulation //
  /////////////////////////////

    problem PoissonSIP(u,v)
    = aSIP(u,v)
    - int2d(Th, qforder=qfo)(f*v) // RHS
    // + int1d(Th, dirichletBoundary, qforder=qfo)( g*(dn(v)-PenaltyParameter*v) ); // Dirichlet condition (imposee de maniere faible)
      + on(1,2,3,4,u=g);

  problem Poisson(uu,vv,solver=CG)
    = int2d(Th)(dx(uu)*dx(vv)+dy(uu)*dy(vv)) - int2d(Th)(f*vv) + on(1,2,3,4,uu=g);

  //////////////
  // Solve DG //
  //////////////
  real time0, time1;
  time0 = clock();
  PoissonSIP;
  time1 = clock();
  cout << "DG SIP time= " << time1-time0 << endl;

  //////////////
  // Solve CG //
  //////////////
  if(interactive) {plot(u,cmm="Discontinuous Galerkin",wait=1,value=1,fill=1);}
  time0 = clock();
  Poisson;
  time1 = clock();
  cout << "CG time=     " << time1-time0 << endl;
  if(interactive) plot(uu,cmm="Continuous Galerkin",wait=1,value=1,fill=1);

  // cout << "Residual (DG): " << int2d(Th,qforder=qfo)(dx(u)*dx(u) + dy(u)*dy(u) - int2d(Th)(f*u)) << endl;
  // cout << "Residual (CG): " << int2d(Th)(dx(uu)*dx(uu) + dy(uu)*dy(uu) - int2d(Th)(f*uu)) << endl;

  Vh error = u-uExact;
  cout << "DG error L2= " << int2d(Th)(error[]'*error[]) << endl;
  error = uu-uExact;
  cout << "CG error L2= " << int2d(Th)(error[]'*error[]) << endl;
 }
