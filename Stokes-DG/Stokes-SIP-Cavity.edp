// Discontinous Galerlin SIP Method for solve Stokes system
//
// Based on [Di Pietro - Ern, Mathematical Aspects of Discontinuous
// Galerkin Methods], Chapter 6
//
// J. Rafael Rodr\'iguez Galv\'an

load "Element_P3"
load "Element_P4"
load "Element_P3dc"
load "Element_P4dc"

////////////////
// Parameters //
////////////////

verbosity=0;
real SIPPenalty=1.0e+2; // Penalty to achieve coercivity in DG SIP forms
real BoundaryPenalty=1.0e+1; // Penalty for Nitsche trick (weak Dirichlet condition)
real nu=1.0;

// macro hFace() (1.0/sqrt(n)) // An approximation of h_F (length of face)
macro hFace() (lenEdge) // An approximation of h_F (length of face)
  ;
macro LocalPenalty() (SIPPenalty/hFace) // EOM
  ;

// func uSurface = x*(1-x); // Horizontal surface velocity in cavity test
func uSurface=1;
func f1 = 0; // RHS / u
func f2 = 0; // RHS / v
real pEpsilon  = 1.0e-10; // Penalty epsilon in p-equations

int [int] meshSizes= [8,16,32];

for(int i=0; i<meshSizes.n; i++) {
  int n = meshSizes[i];
  cout << "n=" << n << endl;

  ////////////////////////////////////
  // Mesh and Finite Element Spaces //
  ////////////////////////////////////
  mesh Th = square(n,n);
  int bottom=1, surface=3; int [int] walls = [2,4];

  int k = 1; // Degree of the polynomials (2 for P2dc ...)
  assert(k==1); // Assure to change the following lines...
  func PkDG = P1dc;  // Discontinuous Pk
  func PkCGu = P1b;  // Continous Pk for velocity
  func PkCGp = P1;  // Continous Pk for pressure
  int qfo = 2*k;  // Order of quadrature formula
  int qfoP = qfo+1;  // Order of quadrature formula for pressure integrals

  // Discontinuous FE
  fespace UhDisc(Th,PkDG);
  fespace VhDisc(Th,PkDG);
  fespace PhDisc(Th,PkDG);
  UhDisc u, ub;
  VhDisc v, vb;
  PhDisc p, pb;

  // Continuous FE (for testing)
  fespace UhCont(Th,PkCGu);
  fespace VhCont(Th,PkCGu);
  fespace PhCont(Th,PkCGp);
  UhCont uu, uub;
  VhCont vv, vvb;
  PhCont pp, ppb;

  ////////////
  // Macros //
  ////////////

  macro dn(u) (N.x*dx(u)+N.y*dy(u) ) //  Normal derivative
    ;
  macro div(u,v) (dx(u)+dy(v)) // EOM
    ;
  // def: jump = external - internal value; on border exter value =0
  //      average = (external + internal value)/2, on border just internal value
  NewMacro aSIP(u,ub)
    (
     int2d(Th, qforder=qfo) ( nu * ( dx(u)*dx(ub) + dy(u)*dy(ub) ) )
     + intalledges(Th, qforder=qfo)
     (
      ( jump(ub)*average(dn(u)) + jump(u)*average(dn(ub)) ) /nTonEdge
      + (LocalPenalty)*(jump(u)*jump(ub))
      )
     ) EndMacro;
  NewMacro bSIP1(u,v,p)
    int2d(Th, qforder=qfo)( -p*(div(u,v)) )
    EndMacro;
  NewMacro bSIP2(u,v,p)
    intalledges(Th, qforder=qfo)
    (
     (jump(u)*N.x + jump(v)*N.y)*average(p) /nTonEdge
     ) EndMacro;
  NewMacro sSIP(q,r)
    intalledges(Th, qforder=qfoP)
    (
     (nTonEdge-1)*hFace*jump(q)*jump(r)
     ) EndMacro;

  // //////////////////////////////
  // // Variational Formulations //
  // //////////////////////////////

  problem StokesSIP([u,v,p], [ub,vb,pb]) =
    aSIP(u,ub) + aSIP(v,vb) // Bilinear form a(.,.)
    + bSIP1(ub,vb,p) + bSIP2(ub,vb,p) // Bilinear form b(.,.)
    - bSIP1(u,v,pb) - bSIP2(u,v,pb) // Bilinear form b(.,.)
    + sSIP(p, pb) // Stabilization
    + int2d(Th)(pEpsilon*p*pb)
    + int1d(Th, surface, bottom, walls)
    (
     - nu*(dn(u)*ub + dn(v)*vb)
     + nu*(u*dn(ub) + v*dn(vb))
     + BoundaryPenalty*n*(u*ub + v*vb)  // n = 1/(h_e)
    )
    // + int1d(Th, surface)
    // ( // Dirichlet condition (imposee de maniere faible)
    //  uSurface*(dn(ub)-BoundaryPenaltyConstant*ub)
    //  + 0.0*(dn(vb)-BoundaryPenaltyConstant*vb)
    //  );
    // + int1d(Th, bottom, walls)
    // ( // Dirichlet condition (imposee de maniere faible)
    //  0.0*(dn(ub)-BoundaryPenaltyConstant*ub)
    //  + 0.0*(dn(vb)-BoundaryPenaltyConstant*vb)
    //  );
    - int1d(Th, surface)
    (
     + nu*(uSurface*dn(ub) + 0.0*dn(vb))
     + BoundaryPenalty*n*uSurface*ub + 0.0*vb //
    )
    - int1d(Th, bottom, walls)
    (
     + nu*(0.0*dn(ub) + 0.0*dn(vb))
     + 0.0*ub + 0.0*vb //
     );

  problem Stokes([uu,vv,pp], [uub,vvb,ppb]) =
    int2d(Th) (
	       + nu * ( dx(uu)*dx(uub) + dy(uu)*dy(uub) )
	       + nu * ( dx(vv)*dx(vvb) + dy(vv)*dy(vvb) )
	       - pp*dx(uub) - pp*dy(vvb)
	       + dx(uu)*ppb + dy(vv)*ppb
	       + pEpsilon*pp*ppb
	       )
    + int1d(Th, surface)
    (
     - nu*(dn(uu)*uub + dn(vv)*vvb)
     + nu*(uu*dn(uub) + vv*dn(vvb))
     + BoundaryPenalty*n*(uu*uub + vv*vvb)  // n = 1/(h_e)
    )
    + int1d(Th, bottom, walls)
    (
     - nu*(dn(uu)*uub + dn(vv)*vvb)
     + nu*(uu*dn(uub) + vv*dn(vvb))
     + BoundaryPenalty*n*(uu*uub + vv*vvb)
     )
    // + intalledges(Th) (
    // 		       (nTonEdge==1)*(1.0/hFace)*uu*uub
    // 		       + (nTonEdge==1)*(1.0/hFace)*vv*vvb
    // 		       )
    // + int1d(Th, surface)
    // ( // Dirichlet condition (imposee de maniere faible)
    //  uu*dn(uub)-LocalPenalty*uu*uub
    //  + vv*dn(vvb)-LocalPenalty*vv*vvb
    //  )
    // + int1d(Th, bottom, walls)
    // ( // Dirichlet condition (imposee de maniere faible)
    //  uu*dn(uub)-LocalPenalty*uu*uub
    //  + vv*dn(vvb)-LocalPenalty*vv*vvb
    //  )
    /////////
    // RHS //
    /////////
    - int2d(Th) (
		 + f1 * uub
		 + f2 * vvb
		 )
    - int1d(Th, surface)
    (
     + nu*(uSurface*dn(uub) + 0.0*dn(vvb))
     + BoundaryPenalty*n*uSurface*uub + 0.0*vvb //
    )
    - int1d(Th, bottom, walls)
    (
     + nu*(0.0*dn(uub) + 0.0*dn(vvb))
     + 0.0*uub + 0.0*vvb //
     );
    // + int1d(Th, surface)
    // ( // Dirichlet condition (imposee de maniere faible)
    //  uSurface*(dn(uub)-LocalPenalty*uub)
    //  + 0.0*(dn(vvb)-LocalPenalty*vvb)
    //  )
    // + int1d(Th, bottom, walls)
    // ( // Dirichlet condition (imposee de maniere faible)
    //  0.0*(dn(uub)-LocalPenalty*uub)
    //  + 0.0*(dn(vvb)-LocalPenalty*vvb)
    //  );
    // + on(surface, uu=uSurface, vv=0.0)
    // + on(bottom, walls, uu=0.0, vv=0.0);

  //////////////
  // Solve DG //
  //////////////
  real time0, time1;
  time0 = clock();
  StokesSIP;
  time1 = clock();
  cout << "DG SIP time: " << time1-time0 << endl;
  // plot(p,cmm="DG-mesh_size=" + n,wait=1,value=1,fill=1);

  //////////////
  // Solve CG //
  //////////////
  time0 = clock();
  Stokes;
  time1 = clock();
  cout << "CG time:     " << time1-time0 << endl;

  real divDG = int2d(Th)(div(u,v)), divCG = int2d(Th)(div(uu,vv));
  cout << " Divergence (integral in L2)... CG/DG: " << divCG << " / " << divDG << endl;
  real kinDG = sqrt(int2d(Th)(square(u)+square(v)));
  real kinCG = sqrt(int2d(Th)(square(uu)+square(vv)));
  cout << " Kinetic Energy................ CG/DG: " << kinCG << " / " << kinDG << endl;
  real pDG = sqrt(int2d(Th)(square(p)));
  real pCG = sqrt(int2d(Th)(square(pp)));
  cout << " Pressure (squared norm)....... CG/DG: " << pCG << " / " << pDG << endl;

  if(true) {
    load "iovtk";
    savevtk("/tmp/DG-Stokes-solution" + n + ".vtk",
	    Th,
	    [u,v,0],
	    p,
	    dataname="Velocity Pressure") ;
    savevtk("/tmp/CG-Stokes-solution" + n + ".vtk",
	    Th,
	    [uu,vv,0],
	    pp,
	    dataname="Velocity Pressure") ;
  }

  //////////////
  // Solve CG //
  //////////////
  time0 = clock();
  Stokes;
  time1 = clock();
  cout << "CG time:     " << time1-time0 << endl;

  plot(p,cmm="DG pressure-mesh_size=" + n ,wait=1,value=1,fill=1);
  plot(pp,cmm="CG pressure-mesh_size=" + n ,wait=1,value=1,fill=1);

  // cout << "Residual (DG): " << int2d(Th,qforder=qfo)(dx(u)*dx(u) +
  // dy(u)*dy(u) - int2d(Th)(f*u)) << endl;
  // cout << "Residual (CG): " << int2d(Th)(dx(uu)*dx(uu) +
  // dy(uu)*dy(uu) - int2d(Th)(f*uu)) << endl;

  // Vh error = u-uExact;
 }
